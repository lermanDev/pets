version: "3.7"

x-app: &django-app
  build:
    context: .
    dockerfile: django.Dockerfile
  volumes:
    - ./app:/app
  depends_on:
    - database
  networks:
    - app-network
  environment:
    DEBUG: "0"
    DJANGO_SQL_ENGINE: ${DJANGO_SQL_ENGINE}
    DJANGO_SQL_DATABASE: ${DJANGO_SQL_DATABASE}
    DJANGO_SQL_USER: ${DJANGO_SQL_USER}
    DJANGO_SQL_PASSWORD: ${DJANGO_SQL_PASSWORD}
    DJANGO_SQL_HOST: database
    DJANGO_SQL_PORT: ${DJANGO_SQL_PORT}
    SECRET_KEY: ${SECRET_KEY}
  restart: "unless-stopped"

services:
  traefik:
    image: traefik:v2.4
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt"
    networks:
      - app-network

  database:
    image: postgres:14
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - app-network

  web:
    <<: *django-app
    command: "poetry run gunicorn app.wsgi:application --bind 0.0.0.0:8000"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.django.rule=Host(`${DJANGO_HOST}`)"
      - "traefik.http.routers.django.entrypoints=websecure"
      - "traefik.http.routers.django.tls.certresolver=myresolver"
      - "traefik.docker.network=app-network"

networks:
  app-network:
